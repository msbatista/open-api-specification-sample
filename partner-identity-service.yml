swagger: "2.0"
info:
  description: "This API is responsible to manager platform service providers partners. It provides an easy way to verify partners identity."
  version: "1.0.0"
  title: "Identity API for the Easy Home Services"
  termsOfService: "https://easyhome.io/terms"
  contact:
    email: "silvabatistamarcelo@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "api.partner-identity.easyhome"
basePath: "/v1"
tags:
  - name: "partners"
    description: "Partners management"
    externalDocs:
      description: "Find out more"
      url: "https://easyhomeservices.io/"
schemes:
  - "https"
paths:
  /partner:
    post:
      tags:
        - "partners"
      summary: "Integrate a new partner to the platform"
      description: ""
      operationId: "addPartner"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "An object representing a partner to be added to the platform"
          required: true
          schema:
            $ref: "#/definitions/Partner"
      responses:
        "200":
          description: "The request was accepted successfully and it is queue for internal analysis"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "Partner is invalid"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "401":
          description: "The request was not authenticated"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "403":
          description: "The requester was not authorized to perform this operation"
          schema:
            $ref: "#/definitions/ApiResponseError"
      security:
        - identity_auth:
            - "write:partner"
            - "read:partner"
    put:
      tags:
        - "partners"
      summary: "Update an existing partner"
      description: ""
      operationId: "updatePartner"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "An object representing a partner to be added to the platform"
          required: true
          schema:
            $ref: "#/definitions/Partner"
      responses:
        "204":
          description: "The request was accepted successfully"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "Partner is invalid"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "401":
          description: "The request was not authenticated"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "403":
          description: "The requester was not authorized to perform this operation"
          schema:
            $ref: "#/definitions/ApiResponseError"
      security:
        - identity_auth:
            - "write:partner"
            - "read:partner"
  /partner/{partnerId}:
    get:
      tags:
        - "partners"
      summary: "Get partner by id"
      description: ""
      operationId: "getPartnerById"
      produces: 
      - "application/json"
      parameters:
      - name: partnerId
        in: path
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Partner"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Partner not found"
      security:
      - api_key: []
    delete:
      tags:
        - "partners"
      summary: "Delete a partner by its id"
      operationId: "deletePartnerById"
      produces: 
      - "application/json"
      parameters:
      - name: partnerId
        in: path
        required: true
        type: string
      responses:
        "204":
          description: "The request was accepted successfully"
        "401":
          description: "The request was not authenticated"
          schema:
            $ref: "#/definitions/ApiResponseError"
        "403":
          description: "The requester was not authorized to perform this operation"
          schema:
            $ref: "#/definitions/ApiResponseError"
      security:
        - identity_auth:
            - "write:partner"
  /partner/documentType/{documentType}/value/{documentValue}:
    get:
      tags:
        - "partners"
      summary: "Get partner by document"
      description: ""
      operationId: "getPartnerByDocument"
      produces: 
      - "application/json"
      parameters:
      - name: documentType
        in: path
        required: true
        type: "string"
        enum:
          - "rg"
          - "cpf"
      - name: documentValue
        in: path
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Partner"
        "400":
          description: "Invalid Document supplied supplied"
        "404":
          description: "Partner not found"
      security:
      - api_key: []
securityDefinitions:
  identity_auth:
    type: "oauth2"
    authorizationUrl: "http://api.easyhome.io/oauth/"
    flow: "implicit"
    scopes:
      write:partner: "modify/create partners object"
      read:partner: "read from partners database"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Partner:
    type: "object"
    properties:
      id: 
        type: integer
        format: int64
      document:
        $ref: "#/definitions/Document"
      name:
        type: string
        example: "John Doe"
      email:
        type: string
        example: "john.doe@gmail.com"
      categories:
        type: array
        items:
          $ref: "#/definitions/Category"
      bankingAccount:
        $ref: "#/definitions/BankingAccount"
      telephones:
        type: array
        items:
          $ref: "#/definitions/Telephone"
      addresses:
        type: array
        items:
          $ref: "#/definitions/Address"
  Document:
    type: "object"
    properties:
      type:
        description: "Document type that user can use during the registry stage"
        type: "string"
        enum:
          - "cpf"
          - "rg"
        example: "cpf"
      value:
        description: "Document value"
        type: "string"
        example: "674.397.470-62"
      selfieWithDocument:
        type: string
        description: "A base64 image representing an selfie of the partner with an valid document with an photo"
      documentWithPhotoFrontAndBackImage:
        type: string
        description: "A base64 image representing the front and back side of the partner identity card"
  GoogleOAuthSignIn:
    properties:
      tokenId:
        type: string
        description: "Id token representing an valid google user profile"
      name:
        type: string
        description: "Google profile name"
      email:
        type: string
        description: "Google email address"
      profileImageUrl:
        type: string
        description: "Google profile image url"
  Category:
    type: object
    properties:
      category:
        type: string
        enum:
          - "cleaning"
          - "housekeeping"
        description: "Available categories"
      price:
        type: number
        description: "The price of the service"
  Telephone:
    type: object
    properties:
      type: 
        type: string
        enum: 
          - "cellphone"
      number:
        type: number
        description: "The phone number with area code"
      codeCountry:
        type: string
        enum:
          - "55"
  Address:
    type: object
    properties:
      zipCode:
        type: string
        description: "Zip code of the address or city"
      address:
        type: string
        description: "The address"
      number:
        type: string
        description: "The number of the building"
      complement:
        type: string
        description: "Point of reference, apartment number etc."
      type: 
        type: string
        enum: 
          - "street"
          - "avenue"
          - "condominium"
          - "village"
          - "square"
  Location:
    type: object
    properties:
      city: 
        type: string
        description: "City where the partner lives"
      state:
        type: string
        enum: 
          - "AC"
          - "AL"
          - "AP"
          - "AM"
          - "BA"
          - "CE"
          - "DF"
          - "ES"
          - "GO"
          - "MA"
          - "MT"
          - "MS"
          - "MG"
          - "PA"
          - "PB"
          - "PR"
          - "PE"
          - "PI"
          - "RJ"
          - "RN"
          - "RS"
          - "RO"
          - "RR"
          - "SC"
          - "SP"
          - "SE"
          - "TO" 
      country:
        type: string
        enum:
          - "BR"
  BankingAccount:
    type: object
    properties:
      agencyNumber:
        type: string
        description: "Bank account agency number with digit"
      accountNumber:
        type: string
        description: "Bank account number with digit"
      agency:
        type: string
        enum:
          - "001"
          - "033"
          - "104"
          - "237"
          - "341"
          - "356"
          - "389"
          - "399"
          - "422"
          - "453"
          - "633"
          - "652"
          - "745"
  ApiResponse:
    type: object
    properties:
      code: 
        type: integer
        format: int32
      type:
        type: string
      message: 
        type: string
      partner_id:
        type: integer
        format: int64
  ApiResponseError:
    type: object
    properties:
      code: 
        type: integer
        format: int32
      type:
        type: string
      message: 
        type: string
